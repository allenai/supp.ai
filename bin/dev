#!/usr/bin/env python
# -*- coding: utf-8 -*-

from os import path
from argparse import ArgumentParser
from subprocess import check_call, call, CalledProcessError


def docker_exec(args, command):
    status = call(
        ["docker-compose", "exec", "--user", "root"] + args,
        cwd=path.realpath(path.dirname(__file__)),
    )
    if status != 0:
        print("üí• %s failed." % command)
        exit(status)
    else:
        print("‚ö°Ô∏è %s succeeded." % command)


def api(args):
    resolved_command = None
    if args.command == "types:check":
        resolved_command = ["mypy", "app/start.py"]
    elif args.command == "format":
        resolved_command = ["black", "app"]
    elif args.command == "format:check":
        resolved_command = ["black", "--check", "app"]
    if resolved_command == None:
        raise RuntimeError("Invalid command: %s" % args.command)
    docker_exec(["api"] + resolved_command, args.command)


def ui(args):
    docker_exec(["ui", "yarn", args.command], args.command)


if __name__ == "__main__":
    parser = ArgumentParser(
        prog="dev",
        description="Utility that makes common local development tasks easy.",
    )

    subparsers = parser.add_subparsers()

    api_parser = subparsers.add_parser("api", help="Commands specific to the api.")
    api_parser.add_argument(
        "command",
        choices=["types:check", "format:check", "format"],
        help="The command to execute.",
    )
    api_parser.set_defaults(func=api)

    ui_parser = subparsers.add_parser("ui", help="Commands specific to the ui.")
    ui_parser.add_argument(
        "command", choices=["format:check", "format"], help="The command to execute"
    )
    ui_parser.set_defaults(func=ui)

    args = parser.parse_args()
    args.func(args)
